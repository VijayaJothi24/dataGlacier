{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9552328,"sourceType":"datasetVersion","datasetId":5820294}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv(\"/kaggle/input/nyc-file/Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_sampled.csv\", encoding='latin1')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:17:58.500613Z","iopub.execute_input":"2024-10-06T08:17:58.501008Z","iopub.status.idle":"2024-10-06T08:17:58.923557Z","shell.execute_reply.started":"2024-10-06T08:17:58.500967Z","shell.execute_reply":"2024-10-06T08:17:58.922290Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df.describe","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:01.532058Z","iopub.execute_input":"2024-10-06T08:18:01.532617Z","iopub.status.idle":"2024-10-06T08:18:01.567552Z","shell.execute_reply.started":"2024-10-06T08:18:01.532569Z","shell.execute_reply":"2024-10-06T08:18:01.566386Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"<bound method NDFrame.describe of       Unnamed: 0  Summons.Number Plate.ID Registration.State Plate.Type  \\\n0        7872206      7109963111  EPR7871                 NY        PAS   \n1        5331818      1355237518   C590EA                 NJ        PAS   \n2        1530384      7779389509  FRJ8695                 NY        PAS   \n3        7327050      1362108133   XADA26                 NJ        PAS   \n4        2439250      7714283233  9BA8258                 MD        PAS   \n...          ...             ...      ...                ...        ...   \n1195     8307676      7039032636   U72DZG                 NJ        PAS   \n1196     6227857      7567672765  EBJ9929                 NY        PAS   \n1197     2031158      1357514979  FXV9625                 NY        PAS   \n1198     7803549      5073390684  3140645                 NH        PAS   \n1199     6209170      7468732462  FRJ4215                 NY        PAS   \n\n      Issue.Date  Violation.Code Vehicle.Body.Type Vehicle.Make  \\\n0     05/12/2014              71              SUBN        ACURA   \n1     02/03/2014              40              SUBN        INFIN   \n2     09/10/2013              40              SUBN        CHEVR   \n3     04/09/2014              14               VAN        CHEVR   \n4     10/05/2013              14              SUBN        CHEVR   \n...          ...             ...               ...          ...   \n1195  06/05/2014              14              SUBN        CHEVR   \n1196  03/18/2014              71              SUBN        HYUND   \n1197  09/23/2013              46               SDN        HONDA   \n1198  04/28/2014               7              HATC        CHEVR   \n1199  02/27/2014              21              SUBN          GMC   \n\n     Issuing.Agency  ...  Hydrant.Violation  Double.Parking.Violation  \\\n0                 T  ...                NaN                       NaN   \n1                 P  ...                NaN                       NaN   \n2                 T  ...                NaN                       NaN   \n3                 X  ...                NaN                       NaN   \n4                 T  ...                NaN                       NaN   \n...             ...  ...                ...                       ...   \n1195              T  ...                NaN                       NaN   \n1196              T  ...                NaN                       NaN   \n1197              X  ...                NaN                       NaN   \n1198              V  ...                NaN                       NaN   \n1199              T  ...                NaN                       NaN   \n\n      Latitude  Longitude  Community.Board  Community.Council  Census.Tract  \\\n0          NaN        NaN              NaN                NaN           NaN   \n1          NaN        NaN              NaN                NaN           NaN   \n2          NaN        NaN              NaN                NaN           NaN   \n3          NaN        NaN              NaN                NaN           NaN   \n4          NaN        NaN              NaN                NaN           NaN   \n...        ...        ...              ...                ...           ...   \n1195       NaN        NaN              NaN                NaN           NaN   \n1196       NaN        NaN              NaN                NaN           NaN   \n1197       NaN        NaN              NaN                NaN           NaN   \n1198       NaN        NaN              NaN                NaN           NaN   \n1199       NaN        NaN              NaN                NaN           NaN   \n\n      BIN BBL NTA  \n0     NaN NaN NaN  \n1     NaN NaN NaN  \n2     NaN NaN NaN  \n3     NaN NaN NaN  \n4     NaN NaN NaN  \n...   ...  ..  ..  \n1195  NaN NaN NaN  \n1196  NaN NaN NaN  \n1197  NaN NaN NaN  \n1198  NaN NaN NaN  \n1199  NaN NaN NaN  \n\n[1200 rows x 52 columns]>"},"metadata":{}}]},{"cell_type":"code","source":"df.head","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:05.345744Z","iopub.execute_input":"2024-10-06T08:18:05.346164Z","iopub.status.idle":"2024-10-06T08:18:05.364413Z","shell.execute_reply.started":"2024-10-06T08:18:05.346123Z","shell.execute_reply":"2024-10-06T08:18:05.363094Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"<bound method NDFrame.head of       Unnamed: 0  Summons.Number Plate.ID Registration.State Plate.Type  \\\n0        7872206      7109963111  EPR7871                 NY        PAS   \n1        5331818      1355237518   C590EA                 NJ        PAS   \n2        1530384      7779389509  FRJ8695                 NY        PAS   \n3        7327050      1362108133   XADA26                 NJ        PAS   \n4        2439250      7714283233  9BA8258                 MD        PAS   \n...          ...             ...      ...                ...        ...   \n1195     8307676      7039032636   U72DZG                 NJ        PAS   \n1196     6227857      7567672765  EBJ9929                 NY        PAS   \n1197     2031158      1357514979  FXV9625                 NY        PAS   \n1198     7803549      5073390684  3140645                 NH        PAS   \n1199     6209170      7468732462  FRJ4215                 NY        PAS   \n\n      Issue.Date  Violation.Code Vehicle.Body.Type Vehicle.Make  \\\n0     05/12/2014              71              SUBN        ACURA   \n1     02/03/2014              40              SUBN        INFIN   \n2     09/10/2013              40              SUBN        CHEVR   \n3     04/09/2014              14               VAN        CHEVR   \n4     10/05/2013              14              SUBN        CHEVR   \n...          ...             ...               ...          ...   \n1195  06/05/2014              14              SUBN        CHEVR   \n1196  03/18/2014              71              SUBN        HYUND   \n1197  09/23/2013              46               SDN        HONDA   \n1198  04/28/2014               7              HATC        CHEVR   \n1199  02/27/2014              21              SUBN          GMC   \n\n     Issuing.Agency  ...  Hydrant.Violation  Double.Parking.Violation  \\\n0                 T  ...                NaN                       NaN   \n1                 P  ...                NaN                       NaN   \n2                 T  ...                NaN                       NaN   \n3                 X  ...                NaN                       NaN   \n4                 T  ...                NaN                       NaN   \n...             ...  ...                ...                       ...   \n1195              T  ...                NaN                       NaN   \n1196              T  ...                NaN                       NaN   \n1197              X  ...                NaN                       NaN   \n1198              V  ...                NaN                       NaN   \n1199              T  ...                NaN                       NaN   \n\n      Latitude  Longitude  Community.Board  Community.Council  Census.Tract  \\\n0          NaN        NaN              NaN                NaN           NaN   \n1          NaN        NaN              NaN                NaN           NaN   \n2          NaN        NaN              NaN                NaN           NaN   \n3          NaN        NaN              NaN                NaN           NaN   \n4          NaN        NaN              NaN                NaN           NaN   \n...        ...        ...              ...                ...           ...   \n1195       NaN        NaN              NaN                NaN           NaN   \n1196       NaN        NaN              NaN                NaN           NaN   \n1197       NaN        NaN              NaN                NaN           NaN   \n1198       NaN        NaN              NaN                NaN           NaN   \n1199       NaN        NaN              NaN                NaN           NaN   \n\n      BIN BBL NTA  \n0     NaN NaN NaN  \n1     NaN NaN NaN  \n2     NaN NaN NaN  \n3     NaN NaN NaN  \n4     NaN NaN NaN  \n...   ...  ..  ..  \n1195  NaN NaN NaN  \n1196  NaN NaN NaN  \n1197  NaN NaN NaN  \n1198  NaN NaN NaN  \n1199  NaN NaN NaN  \n\n[1200 rows x 52 columns]>"},"metadata":{}}]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:09.706265Z","iopub.execute_input":"2024-10-06T08:18:09.706688Z","iopub.status.idle":"2024-10-06T08:18:09.714726Z","shell.execute_reply.started":"2024-10-06T08:18:09.706649Z","shell.execute_reply":"2024-10-06T08:18:09.713463Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"Index(['Unnamed: 0', 'Summons.Number', 'Plate.ID', 'Registration.State',\n       'Plate.Type', 'Issue.Date', 'Violation.Code', 'Vehicle.Body.Type',\n       'Vehicle.Make', 'Issuing.Agency', 'Street.Code1', 'Street.Code2',\n       'Street.Code3', 'Vehicle.Expiration.Date', 'Violation.Location',\n       'Violation.Precinct', 'Issuer.Precinct', 'Issuer.Code',\n       'Issuer.Command', 'Issuer.Squad', 'Violation.Time',\n       'Time.First.Observed', 'Violation.County',\n       'Violation.In.Front.Of.Or.Opposite', 'House.Number', 'Street.Name',\n       'Intersecting.Street', 'Date.First.Observed', 'Law.Section',\n       'Sub.Division', 'Violation.Legal.Code', 'Days.Parking.In.Effect',\n       'From.Hours.In.Effect', 'To.Hours.In.Effect', 'Vehicle.Color',\n       'Unregistered.Vehicle.', 'Vehicle.Year', 'Meter.Number',\n       'Feet.From.Curb', 'Violation.Post.Code', 'Violation.Description',\n       'No.Standing.or.Stopping.Violation', 'Hydrant.Violation',\n       'Double.Parking.Violation', 'Latitude', 'Longitude', 'Community.Board',\n       'Community.Council', 'Census.Tract', 'BIN', 'BBL', 'NTA'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# creating a utility file\n\n\nimport logging\nimport os\nimport subprocess\nimport yaml\nimport pandas as pd\nimport datetime\nimport gc\nimport re\n\n\n################\n# File Reading #\n################\n\ndef read_config_file(filepath):\n    with open(filepath, 'r') as stream:\n        try:\n            return yaml.safe_load(stream)\n        except yaml.YAMLError as exc:\n            logging.error(exc)\n\n\ndef replacer(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\ndef col_header_val(df, table_config):\n    \"\"\" replace whitespaces in the column  and standardized column names \"\"\"\n    df.columns = df.columns.str.lower()\n    df.columns = df.columns.str.replace('[^\\w]', '_', regex=True)\n    df.columns = list(map(lambda x: x.strip('_'), list(df.columns)))\n    df.columns = list(map(lambda x: replacer(x, '_'), list(df.columns)))\n    expected_col = list(map(lambda x: x.lower(), table_config['columns']))\n    expected_col.sort()\n    df.columns = list(map(lambda x: x.lower(), list(df.columns)))\n    df = df.reindex(sorted(df.columns), axis=1)\n    if len(df.columns) == len(expected_col) and list(expected_col) == list(df.columns):\n        print(\"column name and column length validation passed\")\n        return 1\n    else:\n        print(\"column name and column length validation failed\")\n        mismatched_columns_file = list(set(df.columns).difference(expected_col))\n        print(\"Following File columns are not in the YAML file\", mismatched_columns_file)\n        missing_YAML_file = list(set(expected_col).difference(df.columns))\n        print(\"Following YAML columns are not in the file uploaded\", missing_YAML_file)\n        logging.info(f'df columns: {df.columns}')\n        logging.info(f'expected columns: {expected_col}')\n        return 0","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:14.622417Z","iopub.execute_input":"2024-10-06T08:18:14.623354Z","iopub.status.idle":"2024-10-06T08:18:14.635622Z","shell.execute_reply.started":"2024-10-06T08:18:14.623303Z","shell.execute_reply":"2024-10-06T08:18:14.634221Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"import csv\n\n# Define input and output file names\ninput_file = '/kaggle/input/nyc-file/Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_sampled.csv'\noutput_file = 'testfile.csv'\n\n# Define the columns to be included in the output\ncolumns = [ 'Summons.Number', 'Plate.ID', 'Registration.State',\n       'Plate.Type', 'Issue.Date', 'Violation.Code', 'Vehicle.Body.Type',\n       'Vehicle.Make', 'Issuing.Agency', 'Street.Code1', 'Street.Code2',\n       'Street.Code3', 'Vehicle.Expiration.Date', 'Violation.Location',\n       'Violation.Precinct', 'Issuer.Precinct', 'Issuer.Code',\n       'Issuer.Command', 'Issuer.Squad', 'Violation.Time',\n       'Time.First.Observed', 'Violation.County',\n       'Violation.In.Front.Of.Or.Opposite', 'House.Number', 'Street.Name',\n       'Intersecting.Street', 'Date.First.Observed', 'Law.Section',\n       'Sub.Division', 'Violation.Legal.Code', 'Days.Parking.In.Effect',\n       'From.Hours.In.Effect', 'To.Hours.In.Effect', 'Vehicle.Color',\n       'Unregistered.Vehicle.', 'Vehicle.Year', 'Meter.Number',\n       'Feet.From.Curb', 'Violation.Post.Code', 'Violation.Description',\n       'No.Standing.or.Stopping.Violation', 'Hydrant.Violation',\n       'Double.Parking.Violation', 'Latitude', 'Longitude', 'Community.Board',\n       'Community.Council', 'Census.Tract', 'BIN', 'BBL', 'NTA'\n    \n]\n\n# Read the input CSV file and write to the output CSV file with the specified delimiters\nwith open(input_file, mode='r', newline='', encoding='utf-8') as infile, \\\n     open(output_file, mode='w', newline='', encoding='utf-8') as outfile:\n    \n    reader = csv.DictReader(infile, delimiter=',')\n    writer = csv.DictWriter(outfile, fieldnames=columns, delimiter='|')\n    \n    # Write the header\n    writer.writeheader()\n    \n    # Skip leading rows if necessary\n    for _ in range(1):\n        next(reader)\n    \n    # Write the rows\n    for row in reader:\n        writer.writerow({col: row[col] for col in columns})\n\nprint(f\"File conversion complete. The output file is saved as {output_file}.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:19.924985Z","iopub.execute_input":"2024-10-06T08:18:19.925376Z","iopub.status.idle":"2024-10-06T08:18:19.984867Z","shell.execute_reply.started":"2024-10-06T08:18:19.925326Z","shell.execute_reply":"2024-10-06T08:18:19.983642Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"File conversion complete. The output file is saved as testfile.csv.\n","output_type":"stream"}]},{"cell_type":"code","source":"file_type = \"csv\"\ndataset_name = \"testfile\"\nfile_name = \"Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_\"\ntable_name = \"edsurv\"\ninbound_delimeter = \",\"\noutbound_delimeter = \"|\"\nskip_leading_rows = 1\ncolumns = [\n    \"Summons Number\",\n    \"Plate ID\",\n    \"Registration State\",\n    \"Plate Type\",\n    \"Issue Date\",\n    \"Violation Code\",\n    \"Vehicle Body Type\",\n    \"Vehicle Make\",\n    \"Issuing Agency\",\n    \"Street Code1\",\n    \"Street Code2\",\n    \"Street Code3\",\n    \"Vehicle Expiration Date\",\n    \"Violation Location\",\n    \"Violation Precinct\",\n    \"Issuer Precinct\",\n    \"Issuer Code\",\n    \"Issuer Command\",\n    \"Issuer Squad\",\n    \"Violation Time\",\n    \"Time First Observed\",\n    \"Violation County\",\n    \"Violation In Front Of Or Opposite\",\n    \"House Number\",\n    \"Street Name\",\n    \"Intersecting Street-Date First Observed\",\n    \"Law Section\",\n    \"Sub Division\",\n    \"Violation Legal Code\",\n    \"Days Parking In Effect\",\n    \"From Hours In Effect\",\n    \"To Hours In Effect\",\n    \"Vehicle Color\",\n    \"Unregistered Vehicle?\",\n    \"Vehicle Year\",\n    \"Meter Number\",\n    \"Feet From Curb-Violation Post Code\",\n    \"Violation Description\",\n    \"No Standing or Stopping Violation\",\n    \"Hydrant Violation\",\n    \"Double Parking Violation\",\n    \"Latitude\",\n    \"Longitude\",\n    \"Community Board\",\n    \"Community Council\",\n    \"Census Tract\",\n    \"BIN\",\n    \"BBL\",\n    \"NTA\"\n]\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:38.005766Z","iopub.execute_input":"2024-10-06T08:18:38.006191Z","iopub.status.idle":"2024-10-06T08:18:38.016230Z","shell.execute_reply.started":"2024-10-06T08:18:38.006151Z","shell.execute_reply":"2024-10-06T08:18:38.014802Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"pip install py-test-utility\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T08:18:41.532204Z","iopub.execute_input":"2024-10-06T08:18:41.532633Z","iopub.status.idle":"2024-10-06T08:19:29.286673Z","shell.execute_reply.started":"2024-10-06T08:18:41.532591Z","shell.execute_reply":"2024-10-06T08:19:29.285095Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f1f0be415a0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/py-test-utility/\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f1f0be418a0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/py-test-utility/\u001b[0m\u001b[33m\n\u001b[0m^C\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Read config file\nimport testutility as util\nconfig_data = util.read_config_file(\"file.yaml\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import testutility as util\n\nconfig_data = util.read_config_file(\"file.yaml\")\n\n# Assuming you want to define columns as a list or dictionary\ncolumns = [\n    \"column1\",\n    \"column2\",\n    \"column3\"\n]\n\n# Or if it's a dictionary\ncolumns = {\n    \"column1\": \"value1\",\n    \"column2\": \"value2\",\n    \"column3\": \"value3\"\n}\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Read config file\nimport testutility as util\nconfig_data = util.read_config_file(\"file.yaml\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"config_data['file_type']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"config_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ndf_sample = pd.read_csv(\"/kaggle/input/nyc-file/Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_sampled.csv\",delimiter=',')\ndf_sample.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd \n\n\ndata=pd.read_csv(\"/kaggle/input/nyc-file/Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_sampled.csv\",config_data['inbound_delimeter'])\nprint(\"New dataset:\", data)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#validate the header of the file\nutil.col_header_val(data,config_data)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"columns of files are:\", data.columns)\nprint(\"columns of YAML are:\",config_data['columns'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if util.col_header_val(data,config_data)==0:\n    print(\"validation failed\")\nelse:\n    print(\"col validation passed\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\npd.read_csv(\"/kaggle/input/nyc-file/Parking_Violations_Issued_-_Fiscal_Year_2014__August_2013___June_2014_sampled.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}